Перем БазовыеТипыПустое;
Перем БазовыеТипыЧисло;
Перем БазовыеТипыСтрока;
Перем БазовыеТипыУникальныйИдентификатор;
Перем БазовыеТипыСсылка;
Перем БазовыеТипыДвоичныеДанные;
Перем БазовыеТипыДвоичныеДанные82;
Перем БазовыеТипыЧислоСПоказателем;
Перем БазовыеТипыСписок;
Перем БазовыеТипыНеизвестно;

Перем RegExp;

Перем ТипСтрока;
Перем ТипЧисло;
Перем ТипДата;
Перем ТипУИД;
Перем ТипБулево;

Процедура ОсновныеДействияФормыРазобратьСОпределениемТипов(Кнопка)
	
	Если ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ПолеВводаТекущийИндекс и ЭлементыФормы.ПолеВводаТекущийИндекс.ВыделенныйТекст<>"" Тогда
		ЭлементыФормы.ПолеВводаТекущийИндекс.Значение=ЭлементыФормы.ПолеВводаТекущийИндекс.ВыделенныйТекст;
		Возврат;
	КонецЕсли;
	
	ТекИндекс = "";
	стр = Файл;
	тпоз = 0;
	поз = Найти(стр, "\");
	Пока поз > 0 Цикл
		тпоз = тпоз + поз;
		стр = Сред(стр, поз + 1);
		поз = Найти(стр, "\");
	КонецЦикла;
	
	поз = Найти(стр, ":");
	Если поз > 0 Тогда
		тпоз = тпоз + поз;
		ТекИндекс = Сред(Файл, тпоз + 1);
		Файл = Лев(Файл, тпоз - 1);
	КонецЕсли;
	
	оФайл = Новый Файл(Файл);
	Если Не оФайл.Существует() Тогда
		Сообщить("Файл """ + Файл + """ не существует!", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	Текст = Новый ТекстовыйДокумент;
	Текст.Прочитать(Файл);
	
	//ОбщаяОбработка = Обработки.Общая.Создать();
	//ОбщаяОбработка.ТекстВДерево(Текст, Дерево);
	ТекстВДерево(Текст, Дерево);
	ЭлементыФормы.Дерево.СоздатьКолонки();
	
	Если Не ПустаяСтрока(ТекИндекс) Тогда
		ТекущийИндекс = ТекИндекс;
		ПолеВводаТекущийИндексПриИзменении(ЭлементыФормы.ПолеВводаТекущийИндекс);
	КонецЕсли;
КонецПроцедуры

Процедура ДеревоПриАктивизацииСтроки(Элемент)
	ТекущийИндекс = "";
	ТекСтрока = ЭлементыФормы.Дерево.ТекущаяСтрока;
	ТекущийИндекс = "";
	Пока ТекСтрока <> Неопределено Цикл
		СтрокиРодителя = ?(ТекСтрока.Родитель = Неопределено, Дерево.Строки, ТекСтрока.Родитель.Строки);
		ТекущийИндекс = Строка(СтрокиРодителя.Индекс(ТекСтрока)) + ?(ПустаяСтрока(ТекущийИндекс), "", ":" + ТекущийИндекс);
		ТекСтрока = ТекСтрока.Родитель;
	КонецЦикла;
КонецПроцедуры

Процедура ФайлНачалоВыбора(Элемент, СтандартнаяОбработка)
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Если Диалог.Выбрать() Тогда
		Файл = Диалог.ПолноеИмяФайла;
	КонецЕсли;
КонецПроцедуры

Процедура ПолеВводаТекущийИндексПриИзменении(Элемент)
	Если ПустаяСтрока(ТекущийИндекс) Тогда
		Возврат;
	КонецЕсли;
	ТекСтрока = Дерево;
	
	стр = ТекущийИндекс;
	
	поз = Найти(стр, ":");
	Пока поз > 0 Цикл
		стрч = Лев(стр, поз - 1);
		стр = Сред(стр, поз + 1);
		Попытка
			Ин = + стрч;
			ТекСтрока = ТекСтрока.Строки[Ин];
		Исключение
		КонецПопытки;
		поз = Найти(стр, ":");
	КонецЦикла;
	Попытка
		Ин = + стр;
		ТекСтрока = ТекСтрока.Строки[Ин];
	Исключение
	КонецПопытки;
	
	Если ТекСтрока = Дерево Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементыФормы.Дерево.ТекущаяСтрока = ТекСтрока;
	Если ЭлементыФормы.Дерево.ТекущаяКолонка = Неопределено Тогда
		ЭлементыФормы.Дерево.ТекущаяКолонка = ЭлементыФормы.Дерево.Колонки[0];
	КонецЕсли;
КонецПроцедуры

Процедура ФайлПриИзменении(Элемент)
	
	ОсновныеДействияФормыРазобратьСОпределениемТипов(Элемент);
	ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ПолеВводаТекущийИндекс;
	
КонецПроцедуры

Процедура ПриОткрытии()
	КлючУникальности = Новый УникальныйИдентификатор();
КонецПроцедуры

Функция ТекстВДерево(Текст, _Дерево = Неопределено) 
	Тип_ПустоеЗначение = БазовыеТипыПустое;
	Тип_Строка = БазовыеТипыСтрока;
	Тип_Вложенное = БазовыеТипыСписок;

	// Режимы парсера
	Режим_ОжиданиеЗначения = 0;
	Режим_ВводСтроки = 1;
	Режим_ВводЗначения = 2;
	Режим_ОжиданиеРазделителя = 3;
	
	Если ТипЗнч(_Дерево) = Тип("ДеревоЗначений") Тогда
		_Дерево.Колонки.Очистить();
	Иначе
		_Дерево = Новый ДеревоЗначений;
	КонецЕсли;
	
	_Дерево.Колонки.Добавить("БазовыйТип");
	_Дерево.Колонки.Добавить("Значение");
	
	ТекущаяСтрока = _Дерево.Строки.Добавить();
	
	Режим = Режим_ОжиданиеЗначения;
	ВременноеЗначение = "";
	
	Для НомерСтрокиВходнойСтроки = 1 По Текст.КоличествоСтрок() Цикл
		//Если НомерСтрокиВходнойСтроки % 300 = 0 Тогда
		//	Прогресс();
		//КонецЕсли;
		
		текВходнаяСтрока = Текст.ПолучитьСтроку(НомерСтрокиВходнойСтроки) + Символы.ПС;
		
		Пока Не ПустаяСтрока(текВходнаяСтрока) Цикл
			Если Режим = Режим_ОжиданиеЗначения Тогда
				текВходнаяСтрока = СокрЛ(текВходнаяСтрока);
				ОчереднойСимвол = Лев(текВходнаяСтрока, 1);
				текВходнаяСтрока = Сред(текВходнаяСтрока, 2);
				Если ОчереднойСимвол = "{" Тогда
					ТекущаяСтрока.БазовыйТип = Тип_Вложенное;
					ТекущаяСтрока = ТекущаяСтрока.Строки.Добавить();
				ИначеЕсли ОчереднойСимвол = """" Тогда
					ТекущаяСтрока.БазовыйТип = Тип_Строка;
					ВременноеЗначение = "";
					Режим = Режим_ВводСтроки;
				ИначеЕсли ОчереднойСимвол = "," Тогда
					ТекущаяСтрока.БазовыйТип = Тип_ПустоеЗначение;
					ТекущаяСтрока = ТекущаяСтрока.Родитель.Строки.Добавить();
				ИначеЕсли ОчереднойСимвол = "}" Тогда
					ТекущаяСтрока.БазовыйТип = Тип_ПустоеЗначение;
					ТекущаяСтрока = ТекущаяСтрока.Родитель;
					Если ТекущаяСтрока.Строки.Количество() = 1 Тогда
						ТекущаяСтрока.Строки.Очистить();
					КонецЕсли;
					Режим = Режим_ОжиданиеРазделителя;
				Иначе
					ВременноеЗначение = ОчереднойСимвол;
					Режим = Режим_ВводЗначения;
				КонецЕсли;
			ИначеЕсли Режим = Режим_ВводСтроки Тогда
				поз = Найти(текВходнаяСтрока, """");
				Если поз = 0 Тогда
					ВременноеЗначение = ВременноеЗначение + текВходнаяСтрока;
					текВходнаяСтрока = "";
				Иначе
					ВременноеЗначение = ВременноеЗначение + Лев(текВходнаяСтрока, поз - 1);
					текВходнаяСтрока = Сред(текВходнаяСтрока, поз + 1);
					Если Лев(текВходнаяСтрока, 1) = """" Тогда
						ВременноеЗначение = ВременноеЗначение + """";
						текВходнаяСтрока = Сред(текВходнаяСтрока, 2);
					Иначе
						ТекущаяСтрока.Значение = ВременноеЗначение;
						Режим = Режим_ОжиданиеРазделителя;
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли Режим = Режим_ВводЗначения Тогда
				поз1 = Найти(текВходнаяСтрока, ",");
				поз2 = Найти(текВходнаяСтрока, "}");
				Если поз1 = 0 Тогда
					Если поз2 = 0 Тогда
						ВременноеЗначение = ВременноеЗначение + текВходнаяСтрока;
						текВходнаяСтрока = "";
					Иначе
						ВременноеЗначение = ВременноеЗначение + Лев(текВходнаяСтрока, поз2 - 1);
						текВходнаяСтрока = Сред(текВходнаяСтрока, поз2 + 1);
						ТекущаяСтрока.Значение = ВременноеЗначение;
						КлассифицироватьЗначение(ТекущаяСтрока);
						ТекущаяСтрока = ТекущаяСтрока.Родитель;
						Режим = Режим_ОжиданиеРазделителя;
					КонецЕсли;
				Иначе
					Если поз2 = 0 Тогда
						ВременноеЗначение = ВременноеЗначение + Лев(текВходнаяСтрока, поз1 - 1);
						текВходнаяСтрока = Сред(текВходнаяСтрока, поз1 + 1);
						ТекущаяСтрока.Значение = ВременноеЗначение;
						КлассифицироватьЗначение(ТекущаяСтрока);
						ТекущаяСтрока = ТекущаяСтрока.Родитель.Строки.Добавить();
						Режим = Режим_ОжиданиеЗначения;
					Иначе
						Если поз1 < поз2 Тогда
							ВременноеЗначение = ВременноеЗначение + Лев(текВходнаяСтрока, поз1 - 1);
							текВходнаяСтрока = Сред(текВходнаяСтрока, поз1 + 1);
							ТекущаяСтрока.Значение = ВременноеЗначение;
							КлассифицироватьЗначение(ТекущаяСтрока);
							ТекущаяСтрока = ТекущаяСтрока.Родитель.Строки.Добавить();
							Режим = Режим_ОжиданиеЗначения;
						Иначе
							ВременноеЗначение = ВременноеЗначение + Лев(текВходнаяСтрока, поз2 - 1);
							текВходнаяСтрока = Сред(текВходнаяСтрока, поз2 + 1);
							ТекущаяСтрока.Значение = ВременноеЗначение;
							КлассифицироватьЗначение(ТекущаяСтрока);
							ТекущаяСтрока = ТекущаяСтрока.Родитель;
							Режим = Режим_ОжиданиеРазделителя;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли Режим = Режим_ОжиданиеРазделителя Тогда
				текВходнаяСтрока = СокрЛ(текВходнаяСтрока);
				ОчереднойСимвол = Лев(текВходнаяСтрока, 1);
				текВходнаяСтрока = Сред(текВходнаяСтрока, 2);
				Если ОчереднойСимвол = "," Тогда
					ТекущаяСтрока = ТекущаяСтрока.Родитель.Строки.Добавить();
					Режим = Режим_ОжиданиеЗначения;
				ИначеЕсли ОчереднойСимвол = "}" Тогда
					ТекущаяСтрока = ТекущаяСтрока.Родитель;
				Иначе
					Сообщение("Недопустимый символ " + ОчереднойСимвол + " (Код символа " + КодСимвола(ОчереднойСимвол) + ") в режиме ожидания разделителя", СтатусСообщения.Внимание);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат _Дерево;
КонецФункции

Процедура КлассифицироватьЗначение(ТекущаяСтрока)
	
	// Число
	RegExp.Pattern = "^-?[0-9]+\.?[0-9]*$";
	Если RegExp.Test(ТекущаяСтрока.Значение) Тогда
		ТекущаяСтрока.БазовыйТип = БазовыеТипыЧисло;
		Возврат;
	КонецЕсли;
	
	// UUID
	RegExp.Pattern = "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$";
	Если RegExp.Test(ТекущаяСтрока.Значение) Тогда
		ТекущаяСтрока.БазовыйТип = БазовыеТипыУникальныйИдентификатор;
		Возврат;
	КонецЕсли;
	
	// Ссылка
	RegExp.Pattern = "^[0-9]+:[0-9a-fA-F]{32}$";
	Если RegExp.Test(ТекущаяСтрока.Значение) Тогда
		ТекущаяСтрока.БазовыйТип = БазовыеТипыСсылка;
		Возврат;
	КонецЕсли;
	
	// base64
	RegExp.Pattern = "^#base64:[0-9a-zA-Z\+=\r\n\/]+$";
	Если RegExp.Test(ТекущаяСтрока.Значение) Тогда
		ТекущаяСтрока.БазовыйТип = БазовыеТипыДвоичныеДанные;
		Возврат;
	КонецЕсли;
	
	// Число с показателем степени
	RegExp.Pattern = "^-?[0-9]+\.?[0-9]*e-?[0-9]+$";
	Если RegExp.Test(ТекущаяСтрока.Значение) Тогда
		ТекущаяСтрока.БазовыйТип = БазовыеТипыЧислоСПоказателем;
		Возврат;
	КонецЕсли;
	
	// base64 (8.2)
	RegExp.Pattern = "^[0-9a-zA-Z\+=\r\n\/]+$";
	Если RegExp.Test(ТекущаяСтрока.Значение) Тогда
		//ТекущаяСтрока.БазовыйТип = БазовыеТипыДвоичныеДанные82;
		ТекущаяСтрока.БазовыйТип = БазовыеТипыДвоичныеДанные;
		Возврат;
	КонецЕсли;
	
	// data
	RegExp.Pattern = "^#data:[0-9a-zA-Z\+=\r\n\/]+$";
	Если RegExp.Test(ТекущаяСтрока.Значение) Тогда
		ТекущаяСтрока.БазовыйТип = БазовыеТипыДвоичныеДанные;
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока.БазовыйТип = БазовыеТипыНеизвестно;
	Сообщение("Не удалось определить тип значения " + Символы.ПС + ТекущаяСтрока.Значение, СтатусСообщения.Внимание); 
	
КонецПроцедуры //КлассифицироватьЗначение(ТекущаяСтрока)

Процедура Сообщение(ТекстСообщения, ВажностьСообщения = Неопределено)
	Если ВажностьСообщения = Неопределено Тогда
		ВажностьСообщения = СтатусСообщения.Обычное; 
	КонецЕсли;
	Сообщить("<" + ТекущаяДата() + "> " + ТекстСообщения, ВажностьСообщения);
КонецПроцедуры //Сообщение()

Процедура ОсновныеДействияФормыСохранить(Кнопка)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогВыбораФайла.Фильтр = "Дерево значений(*.ДЗ)|*.ДЗ";
	Если ДиалогВыбораФайла.Выбрать() Тогда
		ЗначениеВФайл(ДиалогВыбораФайла.ПолноеИмяФайла, Дерево);
	КонецЕсли; 

КонецПроцедуры

БазовыеТипыПустое = "Пусто";
БазовыеТипыЧисло = "Число";
БазовыеТипыСтрока = "Строка";
БазовыеТипыУникальныйИдентификатор = "GUID";
БазовыеТипыСсылка = "Ссылка";
БазовыеТипыДвоичныеДанные = "Base64";
БазовыеТипыЧислоСПоказателем = "Число с показателем";
БазовыеТипыСписок = "Список";
БазовыеТипыНеизвестно = "Неизвестно";


//БазовыеТипыПустое = 0;
//БазовыеТипыЧисло = 1;
//БазовыеТипыСтрока = 2;
//БазовыеТипыУникальныйИдентификатор = 3;
//БазовыеТипыСсылка = 4;
//БазовыеТипыДвоичныеДанные = 5;
//БазовыеТипыЧислоСПоказателем = 6;
//БазовыеТипыСписок = 7;
//БазовыеТипыДвоичныеДанные82 = 8;
//БазовыеТипыНеизвестно = 9;

RegExp = Новый COMОбъект("VBScript.RegExp");
RegExp.MultiLine = Ложь;
RegExp.Global = Истина;
RegExp.IgnoreCase = Ложь;

ТипСтрока = Тип("Строка");
ТипЧисло = Тип("Число");
ТипДата = Тип("Дата");
ТипУИД = Тип("УникальныйИдентификатор");
ТипБулево = Тип("Булево");

