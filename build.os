#Использовать asserts
#Использовать cmdline
#Использовать logos

Перем Лог;
Перем ИмяКаталогаСборки;
Перем КаталогСборки;
Перем ПутьКБинарникамНод;
Перем СоответствиеКаталоговПакетов;

Процедура Инициализация()

	Лог = Логирование.ПолучитьЛог("1c-syntax.app.build");
	Лог.УстановитьУровень(УровниЛога.Информация);
	
	СоответствиеКаталоговПакетов = ПолучитьСоответствияКаталоговПакетов();
	ИмяКаталогаСборки = "build";
	СоздатьКаталогиСборки();
	
	ПутьКБинарникамНод = ОбъединитьПути("node_modules", ".bin");
	
	КомандаЗапуска = "npm -v";
	ВыполнитьКоманду(КомандаЗапуска, "Ошибка проверки версии npm");
	
	КомандаЗапуска = "npm install";
	ВыполнитьКоманду(КомандаЗапуска, "Ошибка установки пакетов node.js");

КонецПроцедуры

Функция Конструктор_СоответствиеКаталоговПакетов(КаталогСборки, КаталогГрамматик, КаталогСниппетов)
	
	Структура = Новый Структура;
	Структура.Вставить("КаталогСборки", 	КаталогСборки);
	Структура.Вставить("КаталогГрамматик", 	КаталогГрамматик);
	Структура.Вставить("КаталогСниппетов", 	КаталогСниппетов);
	
	Возврат Структура;
	
КонецФункции

Функция ПолучитьСоответствияКаталоговПакетов()
	
	Структура = Новый Структура;
	Структура.Вставить("Atom", 	Конструктор_СоответствиеКаталоговПакетов("Atom", 	"grammars", "snippets"));
	Структура.Вставить("ST", 	Конструктор_СоответствиеКаталоговПакетов("ST", 		".", 		"snippets"));
	Структура.Вставить("VSC", 	Конструктор_СоответствиеКаталоговПакетов("VSC", 	"syntaxes", "snippets"));
	
	Возврат Структура;
	
КонецФункции

Процедура СоздатьКаталогиСборки()

	ИмяКаталогаСборки = "build";
	
	КаталогСборки = ОбеспечитьКаталог(ТекущийКаталог(), ИмяКаталогаСборки);
	ОбеспечитьКаталог(КаталогСборки, "snippets");
	
	Для Каждого ДанныеПакета Из СоответствиеКаталоговПакетов Цикл
		СоздатьКаталогиПакета(ДанныеПакета.Ключ);
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьКаталогиПакета(ИмяПакета)
	
	СтруктураКаталогов 	= СоответствиеКаталоговПакетов[ИмяПакета];
	КаталогПакета 		= ОбеспечитьКаталог(КаталогСборки, 	СтруктураКаталогов.КаталогСборки);
	КаталогГрамматик 	= ОбеспечитьКаталог(КаталогПакета, 	СтруктураКаталогов.КаталогГрамматик);
	КаталогСниппетов 	= ОбеспечитьКаталог(КаталогПакета, 	СтруктураКаталогов.КаталогСниппетов);
	
КонецПроцедуры

Функция ОбеспечитьКаталог(БазовыйКаталог, НовыйКаталог)
	
	ПутьКНовомуКаталогу = ОбъединитьПути(БазовыйКаталог, НовыйКаталог);
	НовыйКаталог_Файл = Новый Файл(ПутьКНовомуКаталогу);
	Если НЕ НовыйКаталог_Файл.Существует() Тогда
		СоздатьКаталог(ПутьКНовомуКаталогу);
	КонецЕсли;
	
	Возврат ПутьКНовомуКаталогу;
	
КонецФункции

Процедура КопироватьСодержимоеКаталога(Откуда, Куда)
	
	КаталогНазначения = Новый Файл(Куда);
	Если КаталогНазначения.Существует() Тогда
		Если КаталогНазначения.ЭтоФайл() Тогда
			УдалитьФайлы(КаталогНазначения.ПолноеИмя);
			СоздатьКаталог(Куда);
		КонецЕсли;
	Иначе
		СоздатьКаталог(Куда);
	КонецЕсли;

	Файлы = НайтиФайлы(Откуда, ПолучитьМаскуВсеФайлы());
	Для Каждого Файл Из Файлы Цикл
		ПутьКопирования = ОбъединитьПути(Куда, Файл.Имя);
		Если Файл.ЭтоКаталог() Тогда
			КопироватьСодержимоеКаталога(Файл.ПолноеИмя, ПутьКопирования);
		Иначе
			КопироватьФайл(Файл.ПолноеИмя, ПутьКопирования);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура ВыполнитьСкрипт()
	
	Парсер = Новый ПарсерАргументовКоманднойСтроки();
	Парсер.ДобавитьПараметрФлаг("-bsl");
	Парсер.ДобавитьПараметрФлаг("-sdbl");
	Парсер.ДобавитьПараметрФлаг("-snippets");
	Параметры = Парсер.Разобрать(АргументыКоманднойСтроки);
	
	СобиратьBSL      = Ложь;
	СобиратьSDBL     = Ложь;
	СобиратьСниппеты = Ложь;
	
	Если Параметры.Количество() = 0 Тогда
		СобиратьBSL      = Истина;
		СобиратьSDBL     = Истина;
		СобиратьСниппеты = Истина;
	Иначе
		
		Если Параметры["-bsl"] Тогда
			СобиратьBSL = Истина;
		КонецЕсли;
		
		Если Параметры["-sdbl"] Тогда
			СобиратьSDBL = Истина;
		КонецЕсли;
		
		Если Параметры["-snippets"] Тогда
			СобиратьСниппеты = Истина;
		КонецЕсли;

	КонецЕсли;
	
	Если СобиратьBSL Тогда
		СобратьГрамматикуЯзыка("1c");
	КонецЕсли;
	
	Если СобиратьSDBL Тогда
		СобратьГрамматикуЯзыка("1c-query");
	КонецЕсли;

	Если СобиратьСниппеты Тогда
		СобратьСниппеты();
	КонецЕсли;

КонецПроцедуры

Процедура СобратьГрамматикуЯзыка(Знач ИмяФайлаЯзыка)
	
	Лог.Информация("Собираю грамматику по файлу " + ИмяФайлаЯзыка);
	
	Ожидаем.Что(Новый Файл(ИмяФайлаЯзыка + ".YAML-tmLanguage").Существует(), "Ожидаем, что файл языка существует").ЭтоИстина();
		
	КомандаЗапуска = "%1\yaml2json --pretty %3.YAML-tmLanguage > %2\%3.json";
	КомандаЗапуска = СтрШаблон(КомандаЗапуска, ПутьКБинарникамНод, КаталогСборки, ИмяФайлаЯзыка);
	ВыполнитьКоманду(КомандаЗапуска, "Ошибка компиляции YAML -> JSON");
	
	КомандаЗапуска = "%1\json2cson %2\%3.json > %2\%3.cson --2spaces";
	КомандаЗапуска = СтрШаблон(КомандаЗапуска, ПутьКБинарникамНод, КаталогСборки, ИмяФайлаЯзыка);
	ВыполнитьКоманду(КомандаЗапуска, "Ошибка компиляции JSON -> CSON");
	
	ИмяВременногоФайла = ОбъединитьПути(КаталогСборки, "build_tmLanguage.js");
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	
	ТекстСкрипта =
	"var plist = require('plist');
	|var fs = require('fs');
	|
	|var jsonString = fs.readFileSync('./%1/%2.json', 'utf8');
	|var jsonObject = JSON.parse(jsonString);
	|var plistString = plist.build(jsonObject);
	|
	|fs.writeFileSync('./%1/%2.tmLanguage', plistString);";
	
	ТекстСкрипта = СтрШаблон(ТекстСкрипта, ИмяКаталогаСборки, ИмяФайлаЯзыка);
	
	ТекстовыйДокумент.УстановитьТекст(ТекстСкрипта);
	ТекстовыйДокумент.Записать(ИмяВременногоФайла);
	
	КомандаЗапуска = "node " + ИмяВременногоФайла;
	ВыполнитьКоманду(КомандаЗапуска, "Ошибка компиляции JSON -> tmLanguage");
	
	ПутьКФайлуCSON 			= ОбъединитьПути(КаталогСборки, ИмяФайлаЯзыка + ".cson");
	ПутьКФайлуtmLanguage 	= ОбъединитьПути(КаталогСборки, ИмяФайлаЯзыка + ".tmLanguage");
	
	СтруктураКаталоговПакета = СоответствиеКаталоговПакетов.Atom;
	КопироватьФайл(ПутьКФайлуCSON, 			ОбъединитьПути(КаталогСборки, СтруктураКаталоговПакета.КаталогСборки, СтруктураКаталоговПакета.КаталогГрамматик, ИмяФайлаЯзыка + ".cson"));
	СтруктураКаталоговПакета = СоответствиеКаталоговПакетов.ST;
	КопироватьФайл(ПутьКФайлуtmLanguage, 	ОбъединитьПути(КаталогСборки, СтруктураКаталоговПакета.КаталогСборки, СтруктураКаталоговПакета.КаталогГрамматик, ИмяФайлаЯзыка + ".tmLanguage"));
	СтруктураКаталоговПакета = СоответствиеКаталоговПакетов.VSC;
	КопироватьФайл(ПутьКФайлуtmLanguage, 	ОбъединитьПути(КаталогСборки, СтруктураКаталоговПакета.КаталогСборки, СтруктураКаталоговПакета.КаталогГрамматик, ИмяФайлаЯзыка + ".tmLanguage"));
	
	УдалитьФайлы(ИмяВременногоФайла);
	УдалитьФайлы(ОбъединитьПути(КаталогСборки, ИмяФайлаЯзыка + ".json"));
	УдалитьФайлы(ПутьКФайлуCSON);
	УдалитьФайлы(ПутьКФайлуtmLanguage);
	
КонецПроцедуры

Процедура СобратьСниппеты()
	
	Лог.Информация("Собираю сниппеты");
	
	ИмяФайлаСниппетов = "snippets";
	Ожидаем.Что(Новый Файл("snippets.yml").Существует(), "Ожидаем, что файл сниппетов существует").ЭтоИстина();
		
	КомандаЗапуска = "node build_st_snippets.js";
	ВыполнитьКоманду(КомандаЗапуска, "Ошибка сбора сниппетов для ST");
	
	КомандаЗапуска = "node build_vsc_snippets.js";
	ВыполнитьКоманду(КомандаЗапуска, "Ошибка сбора сниппетов для VSC");
	
	КомандаЗапуска = "node build_atom_snippets.js";
	ВыполнитьКоманду(КомандаЗапуска, "Ошибка сбора сниппетов для Atom");
	
	СтруктураКаталоговПакета = СоответствиеКаталоговПакетов.Atom;
	КопироватьФайл(ОбъединитьПути(КаталогСборки, "language-1c-bsl.cson"), ОбъединитьПути(КаталогСборки, СтруктураКаталоговПакета.КаталогСборки, СтруктураКаталоговПакета.КаталогСниппетов, "language-1c-bsl.cson"));
	
	СтруктураКаталоговПакета = СоответствиеКаталоговПакетов.ST;	
	КопироватьСодержимоеКаталога(ОбъединитьПути(КаталогСборки, "snippets"), ОбъединитьПути(КаталогСборки, СтруктураКаталоговПакета.КаталогСборки, СтруктураКаталоговПакета.КаталогСниппетов));
	
	СтруктураКаталоговПакета = СоответствиеКаталоговПакетов.VSC;
	КопироватьФайл(ОбъединитьПути(КаталогСборки, "snippets.json"), ОбъединитьПути(КаталогСборки, СтруктураКаталоговПакета.КаталогСборки, СтруктураКаталоговПакета.КаталогСниппетов, "snippets.json"));
	
	УдалитьФайлы(ОбъединитьПути(КаталогСборки, "language-1c-bsl.cson"));
	УдалитьФайлы(ОбъединитьПути(КаталогСборки, "snippets.json"));
	УдалитьФайлы(ОбъединитьПути(КаталогСборки, "snippets"));
	
КонецПроцедуры
	
Функция ОбернутьВКавычки(Знач Строка)
	Возврат """" + Строка + """";
КонецФункции

Процедура ВыполнитьКоманду(Знач КомандаЗапуска, Знач ТекстОшибки = "", Знач РабочийКаталог = "")

	Лог.Информация("Выполняю команду: " + КомандаЗапуска);

	Процесс = СоздатьПроцесс("cmd.exe /C " + ОбернутьВКавычки(КомандаЗапуска), РабочийКаталог, Истина, , КодировкаТекста.UTF8);
	Процесс.Запустить();
	
	Процесс.ОжидатьЗавершения();
	
	Пока НЕ Процесс.Завершен ИЛИ Процесс.ПотокВывода.ЕстьДанные Цикл
		СтрокаВывода = Процесс.ПотокВывода.ПрочитатьСтроку();
		Сообщить(СтрокаВывода);
	КонецЦикла;
	
	Если Процесс.КодВозврата <> 0 Тогда
		Лог.Ошибка("Код возврата: " + Процесс.КодВозврата);
		ВызватьИсключение ТекстОшибки + Символы.ПС + Процесс.ПотокОшибок.Прочитать();
	КонецЕсли;

КонецПроцедуры

Инициализация();
ВыполнитьСкрипт();
