#Использовать cmdline
#Использовать gitrunner
#Использовать logos

Перем Лог;
Перем ДелатьКоммит;

Процедура КопироватьСодержимоеКаталога(Откуда, Куда)

	КаталогНазначения = Новый Файл(Куда);
	Если КаталогНазначения.Существует() Тогда
		Если КаталогНазначения.ЭтоФайл() Тогда
			УдалитьФайлы(КаталогНазначения.ПолноеИмя);
			СоздатьКаталог(Куда);
		КонецЕсли;
	Иначе
		СоздатьКаталог(Куда);
	КонецЕсли;

	Файлы = НайтиФайлы(Откуда, ПолучитьМаскуВсеФайлы());
	Для Каждого Файл Из Файлы Цикл
		ПутьКопирования = ОбъединитьПути(Куда, Файл.Имя);
		Если Файл.ЭтоКаталог() Тогда
			КопироватьСодержимоеКаталога(Файл.ПолноеИмя, ПутьКопирования);
		Иначе
			КопироватьФайл(Файл.ПолноеИмя, ПутьКопирования);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура ОбновитьПакетРедактора(ДанныеКоманды)

	ГитРепозиторий = Новый ГитРепозиторий();
	ГитРепозиторий.УстановитьРабочийКаталог(ДанныеКоманды.ПутьККаталогуРепозитория);

	ТекущаяВетка = ГитРепозиторий.ПолучитьТекущуюВетку();
	Если ДелатьКоммит И (ТекущаяВетка = "develop" ИЛИ ТекущаяВетка = "master") Тогда
		ГитРепозиторий.Получить();
	КонецЕсли;

	ПутьККаталогуПриемнику = ДанныеКоманды.ПутьККаталогуРепозитория;

	ТекстСообщения = СтрШаблон("Копирую файлы пакета в репозиторий %1", ДанныеКоманды.ПутьККаталогуРепозитория);
	Лог.Информация(ТекстСообщения);

	КопироватьСодержимоеКаталога(ДанныеКоманды.ПутьККаталогуИсточнику, ДанныеКоманды.ПутьККаталогуРепозитория);

	Если ДелатьКоммит Тогда

		ВыводКоманды = ГитРепозиторий.Статус();
		Если Найти(ВыводКоманды, "nothing to commit") Тогда
			Возврат;
		КонецЕсли;

		ГитРепозиторий.ДобавитьФайлВИндекс(".");
		ГитРепозиторий.Закоммитить("Package update");

	КонецЕсли;

КонецПроцедуры

Функция Конструктор_ДанныеКомандыОбновленияПакета()

	ДанныеКоманды = Новый Структура;

	ДанныеКоманды.Вставить("ПутьККаталогуИсточнику", 	"");
	ДанныеКоманды.Вставить("ПутьККаталогуРепозитория",	"");

	Возврат ДанныеКоманды;

КонецФункции

Лог = Логирование.ПолучитьЛог("1c-syntax.app.publish");
Лог.УстановитьУровень(УровниЛога.Информация);

Парсер = Новый ПарсерАргументовКоманднойСтроки();
Парсер.ДобавитьПараметрФлаг("-commit");
Парсер.ДобавитьПараметрФлаг("-atom");
Парсер.ДобавитьПараметрФлаг("-st");
Парсер.ДобавитьПараметрФлаг("-vsc");

Параметры = Парсер.Разобрать(АргументыКоманднойСтроки);

ДелатьКоммит = Ложь;
СобиратьAtom = Ложь;
СобиратьST   = Ложь;
СобиратьVSC  = Ложь;

Если Параметры.Количество() > 0 Тогда
	ДелатьКоммит = Параметры["-commit"];
	СобиратьAtom = Параметры["-atom"];
	СобиратьST   = Параметры["-st"];
	СобиратьVSC  = Параметры["-vsc"];
КонецЕсли;

Если НЕ (СобиратьAtom ИЛИ СобиратьST ИЛИ СобиратьVSC) Тогда
	СобиратьAtom = Истина;
	СобиратьST   = Истина;
	СобиратьVSC  = Истина;
КонецЕсли;

ИмяКаталогаСборки = "build";
КаталогСборки = ОбъединитьПути(ТекущийКаталог(), ИмяКаталогаСборки);

ПапкаРепозиториев = ОбъединитьПути(ТекущийКаталог(), "..");
ИмяПакета = "language-1c-bsl";

ИмяПапки_Atom 		= "atom-" + ИмяПакета;
ИмяПапки_Sublime 	= "sublime-" + ИмяПакета;
ИмяПапки_VSC 		= "vsc-" + ИмяПакета;

Папка_Atom 		= ОбъединитьПути(ПапкаРепозиториев, ИмяПапки_Atom);
Папка_Sublime 	= ОбъединитьПути(ПапкаРепозиториев, ИмяПапки_Sublime);
Папка_VSC 		= ОбъединитьПути(ПапкаРепозиториев, ИмяПапки_VSC);

Если СобиратьAtom Тогда
	ДанныеКоманды_Atom = Конструктор_ДанныеКомандыОбновленияПакета();
	ДанныеКоманды_Atom.ПутьККаталогуИсточнику = ОбъединитьПути(КаталогСборки, "Atom");
	ДанныеКоманды_Atom.ПутьККаталогуРепозитория = Папка_Atom;

	ОбновитьПакетРедактора(ДанныеКоманды_Atom);
КонецЕсли;

Если СобиратьST Тогда
	ДанныеКоманды_Sublime = Конструктор_ДанныеКомандыОбновленияПакета();
	ДанныеКоманды_Sublime.ПутьККаталогуИсточнику = ОбъединитьПути(КаталогСборки, "ST");
	ДанныеКоманды_Sublime.ПутьККаталогуРепозитория = Папка_Sublime;

	ОбновитьПакетРедактора(ДанныеКоманды_Sublime);
КонецЕсли;

Если СобиратьVSC Тогда
	ДанныеКоманды_VSC = Конструктор_ДанныеКомандыОбновленияПакета();
	ДанныеКоманды_VSC.ПутьККаталогуИсточнику = ОбъединитьПути(КаталогСборки, "VSC");
	ДанныеКоманды_VSC.ПутьККаталогуРепозитория = Папка_VSC;

	ОбновитьПакетРедактора(ДанныеКоманды_VSC);
КонецЕсли;
